{"version":3,"sources":["components/TodoList/TodoList.jsx","api.js","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["classNames","require","TodoList","state","query","selectedTodos","handleChange","event","target","name","value","setState","this","props","todos","onUserSelected","selectedUserId","filterTodos","filter","todo","title","toLowerCase","includes","completed","className","type","onChange","id","placeholder","map","key","checked","readOnly","userId","onClick","React","Component","request","url","options","fetch","then","response","ok","Error","status","statusText","json","CurrentUser","user","getData","prevProps","data","clearUser","email","phone","App","handleClear","tasks","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9933d536.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './TodoList.scss';\n\nconst classNames = require('classnames');\n\nexport class TodoList extends React.Component {\n  state = {\n    query: '',\n    selectedTodos: 'all',\n  }\n\n  handleChange = (event) => {\n    const { name, value } = event.target;\n\n    this.setState({ [name]: value });\n  }\n\n  render() {\n    const { todos, onUserSelected, selectedUserId } = this.props;\n    const { query, selectedTodos } = this.state;\n\n    const findTodos = todos.filter(todo => (\n      todo.title !== null\n      && todo.title.toLowerCase().includes(query.toLowerCase())\n    ));\n    const filterTodos = findTodos.filter((todo) => {\n      switch (selectedTodos) {\n        case 'Active':\n          return !todo.completed;\n        case 'Completed':\n          return todo.completed;\n        default:\n          return todo;\n      }\n    });\n\n    return (\n\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n\n        <label>\n          Search task:\n          {' '}\n          <input\n            type=\"text\"\n            className=\"TodoList__name-filter\"\n            name=\"query\"\n            value={query}\n            onChange={this.handleChange}\n            id=\"search-query\"\n            placeholder=\"Enter the title\"\n          />\n        </label>\n        {' '}\n        <select\n          name=\"selectedTodos\"\n          value={selectedTodos}\n          onChange={this.handleChange}\n        >\n          <option>All</option>\n          <option>Active</option>\n          <option>Completed</option>\n        </select>\n\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {filterTodos.map(todo => (\n              <li\n                className={classNames(\n                  'TodoList__item',\n                  { 'TodoList__item--checked': todo.completed },\n                  { 'TodoList__item--unchecked': !todo.completed },\n                )}\n                key={todo.id}\n              >\n\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    checked={todo.completed}\n                    readOnly\n                  />\n                  <p>{todo.title}</p>\n                </label>\n                <button\n                  className={classNames({\n                    'TodoList__user-button': true,\n                    'button': true,\n                    'TodoList__user-button--selected': todo.userId === selectedUserId,\n                  })}\n\n                  type=\"button\"\n                  onClick={() => {\n                    onUserSelected(todo.userId);\n                  }}\n                >\n                  User&nbsp;#{todo.userId}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    userId: PropTypes.number,\n    id: PropTypes.number,\n    title: PropTypes.string,\n  }).isRequired).isRequired,\n  selectUser: PropTypes.func.isRequired,\n  changeTaskStatus: PropTypes.func.isRequired,\n};\n","const BASE_URL = 'https://mate-api.herokuapp.com';\n\nconst request = (url, options) => fetch(`${BASE_URL}${url}`, options)\n  .then((response) => {\n    if (!response.ok) {\n      throw new Error(`${response.status} - ${response.statusText}`);\n    }\n\n    return response.json();\n  });\n\nexport const getTodos = () => request('/todos');\nexport const getUser = userId => request(`/users/${userId}`);\n","import React from 'react';\nimport './CurrentUser.scss';\nimport PropTypes from 'prop-types';\nimport { getUser } from '../../api';\n\nexport class CurrentUser extends React.Component {\n  state = {\n    user: null,\n  };\n\n  componentDidMount() {\n    this.getData();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.userId !== this.props.userId) {\n      this.getData();\n    }\n  }\n\n  async getData() {\n    const user = await getUser(this.props.userId);\n\n    this.setState({ user: user.data });\n  }\n\n  render() {\n    const { user } = this.state;\n    const { clearUser } = this.props;\n\n    if (user === null) {\n      return null;\n    }\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>\n            Selected user:\n            {' '}\n            {user.id}\n          </span>\n        </h2>\n\n        <h3 className=\"CurrentUser__name\">{user.name}</h3>\n        <p className=\"CurrentUser__email\">{user.email}</p>\n        <p className=\"CurrentUser__phone\">{user.phone}</p>\n        <button\n          className=\"CurrentUser__clear button\"\n          type=\"submit\"\n          onClick={clearUser}\n        >\n          Clear\n        </button>\n      </div>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  userId: PropTypes.number.isRequired,\n  clearUser: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n  };\n\n  async componentDidMount() {\n    const tasks = await getTodos();\n\n    this.setState({ todos: tasks.data });\n  }\n\n  onUserSelected = (userId) => {\n    this.setState({ selectedUserId: userId });\n  }\n\n  handleClear = () => {\n    this.setState({ selectedUserId: 0 });\n  }\n\n  render() {\n    const { todos, selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            selectedUserId={selectedUserId}\n            todos={todos}\n            onUserSelected={this.onUserSelected}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                clearUser={this.handleClear}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}